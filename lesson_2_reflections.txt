1. What happens when you initialize a repository? Why do you need to do it?
On initializing a repository, a .git folder is added. It means that git has started tracking the folder for changes. We need to do it because we cannot use version control without tracking the changes in the folder.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

Working directory is the folder or version-control on which we are working on. Repository is the image of all the files in the staging area at the time of commit. Staging area helps to select files that we want to add to the repository and the commit all at once for the added files. If some group of files are changed for a particular commit, we can add only those files to the staging area for that particular commit.

3. How can you use the staging area to make sure you have one commit per logical change?

The staging area can be used to add only the file or files to which a logical change has been made and then by commiting the repository we can have the commit of all the changes pertaining to a logical change in one commit.

4. What are some situations when branches would be helpful in keeping you history organized? How would branches help?

When ever we want to make experimental changes to our file we would want to branch out and move to that branch by checkout. This would enable us to make changes independent of the master branch. If it all works out well we can merge later.

5. How do the diagrams help you visualize the branch structure?

Git log can be non-linear. It means that we need not have a string of commits. The commits could branch out (and later. merged back together). By using the command 'git log --graph --oneline branch_name_1 branch_name_2 ...' we can visualize the branch structure of the commits made in a particular project. The diagrams also help to visualize the non-reachable commits. Once commits are made on a parent that is not the HEAD of the branch it doesn't get added to the HEAD of the branch and is not reachable from any commit.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

After merging two branches together we get a new main branch which has the features of both the merged files. It can be used to keep the bugs out before merging. The diagram representation helps to show the parents of each commit and the reachable and non-reachable commits.

7. What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Automatic merging requires complicated algorithms and is therefore not practical. Doing the merging manually helps to give complete control over the code, what portions must be included and what must be discarded. However when the changes are large it becomes tiresome. 